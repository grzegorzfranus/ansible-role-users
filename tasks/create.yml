---
# =============================================================================
# Ansible Role: Users - User Creation Tasks
# =============================================================================
# This file handles the creation and configuration of users on the target system.
#
# Flow:
# 1. Convert Dictionary to List with Username
# 2. Password Generation
# 3. User Account Creation
# 4. SSH Key Management
# =============================================================================

# -----------------------------------------------------------------------------
# 1. Convert Dictionary to List with Username
# -----------------------------------------------------------------------------
- name: Users | create | Convert users dictionary to list
  ansible.builtin.set_fact:
    users_list: "{{ users_list | default([]) + [{'name': username} | combine(user_data)] }}"
  loop: "{{ users_dict | dict2items }}"
  vars:
    username: "{{ item.key }}"
    user_data: "{{ item.value }}"
  when: >
    users_dict is defined and users_dict | length > 0

# -----------------------------------------------------------------------------
# 1a. Discover Existing Users
# -----------------------------------------------------------------------------
- name: Users | create | Gather existing users from system database
  ansible.builtin.getent:
    database: passwd
  register: users_getent
  changed_when: false

- name: Users | create | Build existing users lookup map
  ansible.builtin.set_fact:
    users_existing_map: "{{ users_getent.ansible_facts.getent_passwd | default({}) }}"

# -----------------------------------------------------------------------------
# 2. Password Generation
# -----------------------------------------------------------------------------
- name: Users | create | Generate random passwords for users
  ansible.builtin.set_fact:
    users_generated_passwords: >-
      {{ users_generated_passwords | default({}) | combine({item.name:
         lookup('ansible.builtin.password',
                '/dev/null',
                length=item.password_length | default(users_password_length),
                chars=users_password_chars)
      }) }}
  no_log: true
  with_items: "{{ users_list }}"
  when: >
    users_generate_password | bool and
    item.password is not defined and
    item.state | default('present') == 'present' and
    (users_existing_map[item.name] is not defined or (item.force | default(users_overwrite_existing)) | bool)

- name: Users | create | Store generated passwords to file on Ansible controller
  delegate_to: localhost
  become: false
  ansible.builtin.copy:
    content: |
      # Generated Passwords - {{ ansible_date_time.iso8601 }}
      # Host: {{ inventory_hostname }}
      {% for user in users_list %}
      {% if users_generated_passwords[user.name] is defined %}
      User: {{ user.name }} Password: {{ users_generated_passwords[user.name] }}
      {% endif %}
      {% endfor %}
    dest: "{{ playbook_dir }}/{{ users_password_store_file_name }}"
    mode: "0600"
  no_log: true
  when: >
    users_generate_password | bool and
    users_password_store_file_name != "" and
    users_store_passwords_controller | bool and
    users_generated_passwords is defined and
    users_generated_passwords | length > 0

- name: Users | create | Store generated passwords to file on remote host
  ansible.builtin.copy:
    content: |
      # Generated Passwords - {{ ansible_date_time.iso8601 }}
      # Host: {{ inventory_hostname }}
      {% for user in users_list %}
      {% if users_generated_passwords[user.name] is defined %}
      User: {{ user.name }} Password: {{ users_generated_passwords[user.name] }}
      {% endif %}
      {% endfor %}
    dest: "{{ users_password_store_remote_path }}_{{ inventory_hostname }}"
    owner: root
    group: root
    mode: "0600"
  become: true
  no_log: true
  when: >
    users_generate_password | bool and
    users_password_store_remote_path != "" and
    users_store_passwords_remote | bool and
    users_generated_passwords is defined and
    users_generated_passwords | length > 0

# -----------------------------------------------------------------------------
# 3. User Account Creation
# -----------------------------------------------------------------------------
- name: Users | create | Create user groups
  ansible.builtin.group:
    name: "{{ item.group | default(item.name) }}"
    gid: "{{ item.gid | default(omit) }}"
    state: "{{ item.state | default('present') }}"
    system: "{{ item.system | default(false) }}"
  become: true
  with_items: "{{ users_list }}"
  when: >
    (users_create_group | bool or item.group is defined) and
    item.state | default('present') == 'present'

- name: Users | create | Create user accounts
  ansible.builtin.user:
    name: "{{ item.name }}"
    comment: "{{ (item.comment | default(omit)) if (users_existing_map[item.name] is not defined or (item.force | default(users_overwrite_existing)) | bool) else omit }}"
    uid: "{{ (item.uid | default(omit)) if (users_existing_map[item.name] is not defined or (item.force | default(users_overwrite_existing)) | bool) else omit }}"
    group: "{{ (item.group | default(item.name if users_create_group else omit)) if (users_existing_map[item.name] is not defined or (item.force | default(users_overwrite_existing)) | bool) else omit }}"
    groups: "{{ (item.groups | default(users_default_groups)) if (users_existing_map[item.name] is not defined or (item.force | default(users_overwrite_existing)) | bool) else omit }}"
    append: "{{ (item.append | default(users_append_groups)) if (users_existing_map[item.name] is not defined or (item.force | default(users_overwrite_existing)) | bool) else omit }}"
    shell: "{{ (item.shell | default(users_default_shell)) if (users_existing_map[item.name] is not defined or (item.force | default(users_overwrite_existing)) | bool) else omit }}"
    home: "{{ (item.home | default(omit)) if (users_existing_map[item.name] is not defined or (item.force | default(users_overwrite_existing)) | bool) else omit }}"
    create_home: "{{ (item.create_home | default(users_create_home)) if (users_existing_map[item.name] is not defined or (item.force | default(users_overwrite_existing)) | bool) else omit }}"
    move_home: "{{ (item.move_home | default(false)) if (users_existing_map[item.name] is not defined or (item.force | default(users_overwrite_existing)) | bool) else omit }}"
    system: "{{ (item.system | default(false)) if (users_existing_map[item.name] is not defined or (item.force | default(users_overwrite_existing)) | bool) else omit }}"
    force: "{{ item.force | default(false) }}"
    remove: "{{ item.remove | default(false) }}"
    password: >-
      {{ (
           item.password | default(
             users_generated_passwords[item.name]
             if users_generated_passwords is defined and users_generated_passwords[item.name] is defined
             else omit
           )
         ) | password_hash(users_password_hash_algorithm)
         if (users_existing_map[item.name] is not defined or (item.force | default(users_overwrite_existing)) | bool)
         else omit }}
    update_password: "{{ item.update_password | default(('always' if (users_existing_map[item.name] is not defined or (item.force | default(users_overwrite_existing)) | bool) else 'on_create')) }}"
    expires: "{{ (item.expires | default(omit)) if (users_existing_map[item.name] is not defined or (item.force | default(users_overwrite_existing)) | bool) else omit }}"
    password_expire_max: "{{ (item.password_expire_max | default(users_password_max_age)) if (users_existing_map[item.name] is not defined or (item.force | default(users_overwrite_existing)) | bool) else omit }}"
    password_expire_min: "{{ (item.password_expire_min | default(users_password_min_age)) if (users_existing_map[item.name] is not defined or (item.force | default(users_overwrite_existing)) | bool) else omit }}"
    state: "{{ item.state | default('present') }}"
  become: true
  with_items: "{{ users_list }}"
  no_log: "{{ item.no_log | default(true) }}"

# -----------------------------------------------------------------------------
# 4. SSH Key Management
# -----------------------------------------------------------------------------
- name: Users | create | Create .ssh directories for users
  ansible.builtin.file:
    path: "{{ item.home | default('/home/' + item.name) + '/.ssh' }}"
    state: directory
    owner: "{{ item.name }}"
    group: "{{ item.group | default(omit) }}"
    mode: "0700"
  become: true
  with_items: "{{ users_list }}"
  when: >
    users_manage_ssh_keys | bool and
    item.ssh_keys is defined and
    item.state | default('present') == 'present' and
    item.create_home | default(users_create_home) | bool and
    (users_existing_map[item.name] is not defined or (item.force | default(users_overwrite_existing)) | bool)

- name: Users | create | Add SSH authorized keys for users
  ansible.builtin.authorized_key:
    user: "{{ item.0.name }}"
    key: "{{ item.1 }}"
    manage_dir: true
    state: present
  become: true
  with_subelements:
    - "{{ users_list }}"
    - ssh_keys
    - skip_missing: true
  when: >
    users_manage_ssh_keys | bool and
    item.0.state | default('present') == 'present' and
    (users_existing_map[item.0.name] is not defined or (item.0.force | default(users_overwrite_existing)) | bool)

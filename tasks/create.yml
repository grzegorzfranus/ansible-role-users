---
# =============================================================================
# Ansible Role: Users - User Creation Tasks
# =============================================================================
# This file handles the creation and configuration of users on the target system.
#
# Flow:
# 1. Convert Dictionary to List with Username
# 2. Password Generation
# 3. User Account Creation
# 4. SSH Key Management
# =============================================================================

# -----------------------------------------------------------------------------
# 1. Convert Dictionary to List with Username
# -----------------------------------------------------------------------------
- name: Users | create | Convert users dictionary to list
  ansible.builtin.set_fact:
    users_list: "{{ users_list | default([]) + [{'name': username} | combine(user_data)] }}"
  loop: "{{ users_dict | dict2items }}"
  vars:
    username: "{{ item.key }}"
    user_data: "{{ item.value }}"
  when: >
    users_dict is defined and users_dict | length > 0

# -----------------------------------------------------------------------------
# 2. Password Generation
# -----------------------------------------------------------------------------
- name: Users | create | Generate random passwords for users
  ansible.builtin.set_fact:
    users_generated_passwords: >-
      {{ users_generated_passwords | default({}) | combine({item.name:
         lookup('ansible.builtin.password',
                '/dev/null',
                length=item.password_length | default(users_password_length),
                chars=users_password_chars)
      }) }}
  no_log: true
  with_items: "{{ users_list }}"
  when: >
    users_generate_password | bool and
    item.password is not defined and
    item.state | default('present') == 'present'

- name: Users | create | Store generated passwords to file
  ansible.builtin.copy:
    content: |
      # Generated Passwords - {{ ansible_date_time.iso8601 }}
      {% for user in users_list %}
      {% if users_generated_passwords[user.name] is defined %}
      User: {{ user.name }} Password: {{ users_generated_passwords[user.name] }}
      {% endif %}
      {% endfor %}
    dest: "{{ users_password_store_path }}"
    owner: root
    group: root
    mode: "0600"
  become: true
  no_log: true
  when: >
    users_generate_password | bool and
    users_password_store_path != ""

# -----------------------------------------------------------------------------
# 3. User Account Creation
# -----------------------------------------------------------------------------
- name: Users | create | Create user groups
  ansible.builtin.group:
    name: "{{ item.group | default(item.name) }}"
    gid: "{{ item.gid | default(omit) }}"
    state: "{{ item.state | default('present') }}"
    system: "{{ item.system | default(false) }}"
  become: true
  with_items: "{{ users_list }}"
  when: >
    (users_create_group | bool or item.group is defined) and
    item.state | default('present') == 'present'

- name: Users | create | Create user accounts
  ansible.builtin.user:
    name: "{{ item.name }}"
    comment: "{{ item.comment | default(omit) }}"
    uid: "{{ item.uid | default(omit) }}"
    group: "{{ item.group | default(item.name if users_create_group else omit) }}"
    groups: "{{ item.groups | default(users_default_groups) | join(',') }}"
    append: "{{ item.append | default(users_append_groups) }}"
    shell: "{{ item.shell | default(users_default_shell) }}"
    home: "{{ item.home | default(omit) }}"
    create_home: "{{ item.create_home | default(users_create_home) }}"
    move_home: "{{ item.move_home | default(false) }}"
    system: "{{ item.system | default(false) }}"
    force: "{{ item.force | default(false) }}"
    remove: "{{ item.remove | default(false) }}"
    password: >-
      {{ (item.password | default(
           users_generated_passwords[item.name]
           if users_generated_passwords is defined and users_generated_passwords[item.name] is defined
           else omit
         )) | password_hash('sha512', 65534 | random(seed=inventory_hostname) | string) }}
    update_password: "{{ item.update_password | default('on_create') }}"
    expires: "{{ item.expires | default(omit) }}"
    password_expire_max: "{{ item.password_expire_max | default(users_password_max_age) }}"
    password_expire_min: "{{ item.password_expire_min | default(users_password_min_age) }}"
    state: "{{ item.state | default('present') }}"
  become: true
  with_items: "{{ users_list }}"
  register: users_creation_result
  no_log: "{{ item.no_log | default(true) }}"

# -----------------------------------------------------------------------------
# 4. SSH Key Management
# -----------------------------------------------------------------------------
- name: Users | create | Create .ssh directories for users
  ansible.builtin.file:
    path: "{{ item.home | default('/home/' + item.name) + '/.ssh' }}"
    state: directory
    owner: "{{ item.name }}"
    group: "{{ item.group | default(item.name if users_create_group else omit) }}"
    mode: "0700"
  become: true
  with_items: "{{ users_list }}"
  when: >
    users_manage_ssh_keys | bool and
    item.ssh_keys is defined and
    item.state | default('present') == 'present' and
    users_creation_result is defined and
    item.create_home | default(users_create_home) | bool

- name: Users | create | Add SSH authorized keys for users
  ansible.builtin.authorized_key:
    user: "{{ item.0.name }}"
    key: "{{ item.1 }}"
    manage_dir: true
    state: present
  become: true
  with_subelements:
    - "{{ users_list }}"
    - ssh_keys
    - skip_missing: true
  when: >
    users_manage_ssh_keys | bool and
    item.0.state | default('present') == 'present'

- name: Users | create | Set expiration date for users
  ansible.builtin.command:
    cmd: "chage -E {{ item.expires }} {{ item.name }}"
  args:
    warn: false
  become: true
  with_items: "{{ users_list }}"
  when: >
    item.expires is defined and
    item.state | default('present') == 'present'
  changed_when: true
